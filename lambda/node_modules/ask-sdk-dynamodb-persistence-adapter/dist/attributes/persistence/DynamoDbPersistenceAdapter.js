"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoDbPersistenceAdapter = void 0;
const ask_sdk_core_1 = require("ask-sdk-core");
const aws_sdk_1 = require("aws-sdk");
const PartitionKeyGenerators_1 = require("./PartitionKeyGenerators");
/**
 * Implementation of {@link PersistenceAdapter} using AWS DynamoDB.
 */
class DynamoDbPersistenceAdapter {
    constructor(config) {
        this.tableName = config.tableName;
        this.partitionKeyName = config.partitionKeyName ? config.partitionKeyName : 'id';
        this.attributesName = config.attributesName ? config.attributesName : 'attributes';
        this.createTable = config.createTable === true;
        this.dynamoDBClient = config.dynamoDBClient ? config.dynamoDBClient : new aws_sdk_1.DynamoDB({ apiVersion: 'latest' });
        this.partitionKeyGenerator = config.partitionKeyGenerator ? config.partitionKeyGenerator : PartitionKeyGenerators_1.PartitionKeyGenerators.userId;
        this.dynamoDBDocumentClient = new aws_sdk_1.DynamoDB.DocumentClient({
            convertEmptyValues: true,
            service: this.dynamoDBClient,
        });
        // Create table when createTable is set to true and table does not exist
        if (this.createTable) {
            const createTableParams = {
                AttributeDefinitions: [{
                        AttributeName: this.partitionKeyName,
                        AttributeType: 'S',
                    }],
                KeySchema: [{
                        AttributeName: this.partitionKeyName,
                        KeyType: 'HASH',
                    }],
                ProvisionedThroughput: {
                    ReadCapacityUnits: 5,
                    WriteCapacityUnits: 5,
                },
                TableName: this.tableName,
            };
            this.dynamoDBClient.createTable(createTableParams, (createTableErr) => {
                if (createTableErr && createTableErr.code !== 'ResourceInUseException') {
                    throw ask_sdk_core_1.createAskSdkError(this.constructor.name, `Could not create table (${this.tableName}): ${createTableErr.message}`);
                }
            });
        }
    }
    /**
     * Retrieves persistence attributes from AWS DynamoDB.
     * @param {RequestEnvelope} requestEnvelope Request envelope used to generate partition key.
     * @returns {Promise<Object.<string, any>>}
     */
    async getAttributes(requestEnvelope) {
        const attributesId = this.partitionKeyGenerator(requestEnvelope);
        const getParams = {
            Key: {
                [this.partitionKeyName]: attributesId,
            },
            TableName: this.tableName,
            ConsistentRead: true,
        };
        let data;
        try {
            data = await this.dynamoDBDocumentClient.get(getParams).promise();
        }
        catch (err) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, `Could not read item (${attributesId}) from table (${getParams.TableName}): ${err.message}`);
        }
        if (!Object.keys(data).length) {
            return {};
        }
        else {
            return data.Item[this.attributesName];
        }
    }
    /**
     * Saves persistence attributes to AWS DynamoDB.
     * @param {RequestEnvelope} requestEnvelope Request envelope used to generate partition key.
     * @param {Object.<string, any>} attributes Attributes to be saved to DynamoDB.
     * @return {Promise<void>}
     */
    async saveAttributes(requestEnvelope, attributes) {
        const attributesId = this.partitionKeyGenerator(requestEnvelope);
        const putParams = {
            Item: {
                [this.partitionKeyName]: attributesId,
                [this.attributesName]: attributes,
            },
            TableName: this.tableName,
        };
        try {
            await this.dynamoDBDocumentClient.put(putParams).promise();
        }
        catch (err) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, `Could not save item (${attributesId}) to table (${putParams.TableName}): ${err.message}`);
        }
    }
    /**
     * Delete persistence attributes from AWS DynamoDB.
     * @param {RequestEnvelope} requestEnvelope Request envelope used to generate partition key.
     * @return {Promise<void>}
     */
    async deleteAttributes(requestEnvelope) {
        const attributesId = this.partitionKeyGenerator(requestEnvelope);
        const deleteParams = {
            Key: {
                [this.partitionKeyName]: attributesId,
            },
            TableName: this.tableName,
        };
        try {
            await this.dynamoDBDocumentClient.delete(deleteParams).promise();
        }
        catch (err) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, `Could not delete item (${attributesId}) from table (${deleteParams.TableName}): ${err.message}`);
        }
    }
}
exports.DynamoDbPersistenceAdapter = DynamoDbPersistenceAdapter;
//# sourceMappingURL=DynamoDbPersistenceAdapter.js.map